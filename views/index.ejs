<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Book-Mark</title>
  <link rel="stylesheet" href="/styles/main.css">
</head>
<body>
  <div class="container">
    <h1></h1>
    <a id="newPostBtn" href="/new">New Review</a>
    <button id="sortPostsBtn">Sort Reviews by Rating</button>
    <ul id="postsList">
      <% posts.forEach(post => { %>
        <li data-rating="<%= post.rating %>">
          <div class="post-content">
            <h2><%= post.book_name %></h2>
            <small><%= post.date %></small>
            <div class="post-rating"><%= post.rating %></div>
            <p><%= post.content %></p>
            <small>By: <%= post.author_name %></small>
            <a class="edit" href="/edit/<%= post.id %>">Edit</a>
            <a class="delete" href="/api/posts/delete/<%= post.id %>">Delete</a>
          </div>
          <img data-src="http://covers.openlibrary.org/b/isbn/<%= post.isbn_no %>-M.jpg" alt="Book Cover" class="book-cover lazyload">
        </li>
      <% }); %>
    </ul>
  </div>

  <script>
    document.getElementById('sortPostsBtn').addEventListener('click', function() {
      const postsList = document.getElementById('postsList');
      const posts = Array.from(postsList.children);

      posts.sort((a, b) => {
        const ratingA = parseInt(a.getAttribute('data-rating'));
        const ratingB = parseInt(b.getAttribute('data-rating'));
        return ratingB - ratingA;
      });

      posts.forEach(post => postsList.appendChild(post));
    });

    // Lazy loading images
    document.addEventListener("DOMContentLoaded", function() {
      const lazyImages = [].slice.call(document.querySelectorAll("img.lazyload"));

      if ("IntersectionObserver" in window) {
        let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
          entries.forEach(function(entry) {
            if (entry.isIntersecting) {
              let lazyImage = entry.target;
              lazyImage.src = lazyImage.dataset.src;
              lazyImage.classList.remove("lazyload");
              lazyImageObserver.unobserve(lazyImage);
            }
          });
        });

        lazyImages.forEach(function(lazyImage) {
          lazyImageObserver.observe(lazyImage);
        });
      } else {
        // Fallback for browsers without IntersectionObserver support
        let lazyLoad = function() {
          let active = false;

          if (active === false) {
            active = true;

            setTimeout(function() {
              lazyImages.forEach(function(lazyImage) {
                if ((lazyImage.getBoundingClientRect().top <= window.innerHeight && lazyImage.getBoundingClientRect().bottom >= 0) && getComputedStyle(lazyImage).display !== "none") {
                  lazyImage.src = lazyImage.dataset.src;
                  lazyImage.classList.remove("lazyload");

                  lazyImages = lazyImages.filter(function(image) {
                    return image !== lazyImage;
                  });

                  if (lazyImages.length === 0) {
                    document.removeEventListener("scroll", lazyLoad);
                    window.removeEventListener("resize", lazyLoad);
                    window.removeEventListener("orientationchange", lazyLoad);
                  }
                }
              });

              active = false;
            }, 200);
          }
        };

        document.addEventListener("scroll", lazyLoad);
        window.addEventListener("resize", lazyLoad);
        window.addEventListener("orientationchange", lazyLoad);
      }
    });
  </script>
</body>
</html>
